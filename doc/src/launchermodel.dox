/*! \page launchermodel Launcher Model
 *
 * Lipstick's launcher model is exposed via D-Bus to allow applications
 * such as package managers to update launchers (e.g. during installation,
 * update or removal of applications).
 *
 * \section interface D-Bus Interface
 *
 * The launcher model is exposed as an object on the D-Bus Session Bus:
 *
 *   - Service Name: \c org.nemomobile.lipstick
 *   - Object Path: \c /LauncherModel
 *   - D-Bus Interface: \c org.nemomobile.lipstick.LauncherModel
 *
 * \section methods Methods
 *
 * \subsection updatingstarted updatingStarted(string packageName, string label, string iconPath, string desktopFile)
 *
 * Notifies Lipstick of a install/update/uninstall action that has just
 * started. Depending on the UI used, this should be visualized with a spinner
 * or similar animation so that the user knows the package is being updated.
 *
 *  - \c packageName must be the package name (e.g. myapp) of the package that
 *    is installed/updated/removed, and is mandatory.
 *  - \c label is optional and should be the label for a temporary launcher that
 *    gets added if the package is not yet shown in the launcher (e.g. when the
 *    package is installed for the first time)
 *  - \c iconPath is optional and should be the path to an icon for a temporary
 *    launcher that gets added if the package is not yet shown in the launcher
 *    (e.g. when the package is installed for the first time)
 *  - \c desktopFile is optional and should point to the full, absolute path of
 *    the .desktop file that belongs to this package. Can be left empty, in which
 *    case Lipstick tries to determine the right filename from \c packageName.
 *
 * Between \c updatingStarted and \c updatingFinished, the launcher does not
 * react to taps in the usual way. Instead, a Signal is sent, so that interested
 * applications (e.g. a package manager) can show the progress in its window.
 *
 * \subsection updatingprogress updatingProgress(string packageName, int32 progress)
 *
 * Notifies Lipstick that the progress of a install/update/uninstall action that
 * has been previously started with \c updatingStarted has changed. Depending on
 * the UI used, this can be used to display a progress bar on the icon, or show
 * the installation progress as text label.
 *
 *  - \c packageName must be the package name, as in \c updatingStarted
 *  - \c progress must be the progress value in percent, ranging from 0 to 100.
 *    If the progress is outside of this range, it is expected that the UI hides
 *    any previously-set progress and shows the progress as indeterminate.
 *
 * \subsection updatingfinished updatingFinished(string packageName)
 *
 * Notifies Lipstick that the install/update/uninstall action has finished, and
 * that the progress indicator can be removed from the icon again.
 *
 *  - \c packageName must be the package name, as in \c updatingStarted
 *
 * \section signals Signals
 *
 * During a install/update/uninstall session, a launcher icon does not cause
 * the application to be launched when the launcher icon is tapped. Instead,
 * lipstick broadcasts a signal on the D-Bus session bus. The package manager
 * or other interested applications are expected to listen for this signal
 * during the installation, and - when emitted - show the installation progress
 * of the given package to the user.
 *
 * \subsection showupdatingprogress showUpdatingProgress(string packageName)
 *
 * Emitted when the user taps on a launcher that is currently being updated.
 * The package manager is expected to open a view with the current install
 * progress or show a notification to the user that the application is
 * currently being processed and unavailable for launching.
 *
 * In cases where the application can be launched even during installation,
 * uninstallation or upgrade, the package manager has to take care of launching
 * the app on behalf of Lipstick.
 *
 *  - \c packageName The package name, as passed in to \c updatingStarted
 *
 */
